A mutex (short for "mutual exclusion") is a synchronization mechanism used in multithreading
to control access to shared resources or critical sections of code. The primary purpose of a
mutex lock is to ensure that only one thread can access the protected resource or code segment at any given time.
This helps prevent race conditions, data corruption, and other issues that can arise when multiple threads 
attempt to modify shared data concurrently.

Here are the key uses and features of mutex locks in multithreading:

Critical Section Protection:

Mutex locks are often used to protect critical sections of code. 
A critical section is a part of the code where shared resources are accessed or modified. 
By surrounding the critical section with a mutex lock, only one thread can enter the critical section at a time,
ensuring that the shared resources are accessed in a controlled manner.

Preventing Race Conditions:

Race conditions occur when multiple threads try to access shared data concurrently, 
leading to unpredictable behavior and potential data corruption. By using mutex locks to synchronize
access to shared resources, race conditions can be avoided.

Ensuring Mutual Exclusion:

The term "mutual exclusion" refers to the property that only one thread can hold the mutex lock at any given time.
If a thread attempts to acquire the lock while it is held by another thread, 
the requesting thread will be blocked until the lock becomes available.

Coordinating Thread Execution:

Mutex locks can be used to coordinate the execution of threads, ensuring that certain
conditions are met before a thread proceeds. For example, a thread may need to wait for a resource to become 
available, and a mutex can be used to signal when the resource is ready for access.

Preventing Deadlocks:

While mutex locks help prevent race conditions, improper use can lead to deadlocks, 
where threads are blocked indefinitely. Proper design and careful consideration of lock
acquisition order are necessary to avoid deadlocks in multithreaded programs.
